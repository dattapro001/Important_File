Paypal Account Setup for Laravel

Site Account (Buyer)
Email:              sb-m8abm44987349@personal.example.com
Password:      XMW8[@a2


Learner Account (Seller)
Email:           sb-n20za44795298@business.example.com
Password:   Fl%8mUmu


Step 1:
Run those following Command-install PayPal and create file in config name  with PayPal.php

composer require srmklive/paypal     
-----------------------------------------------------------------------
php artisan vendor:publish --provider="Srmklive\PayPal\Providers\PayPalServiceProvider"

Step 2: 
Set the .env

PAYPAL_MODE=sandbox
PAYPAL_SANDBOX_CLIENT_ID=your_client_id
PAYPAL_SANDBOX_CLIENT_SECRET=your_client_secret
PAYPAL_CURRENCY=GBP

Demo:
PAYPAL_SANDBOX_CLIENT_ID=AeTlIqWfjsvhRWgf86NFQT17uA_NErxO2-NGQmnO6osdfOnbddjlth8vDrCF-q38KhzDpG6FdwkolywK
PAYPAL_SANDBOX_CLIENT_SECRET=EPoBaChhKubpfZCmNAqAdgRK1qc7fFbWqvkl8aaiYuOxQMMyHKaLd1qs1siMRv7pEN209NhByHvNqRXG




Step 3:
Write Paypal Controller (Keep this separate not in payment controller)

<?php
namespace App\Http\Controllers;

use Srmklive\PayPal\Services\PayPal as PayPalClient;
use Illuminate\Http\Request;
use App\Models\CourseProgress;
use App\Models\Course;
use App\Models\Payment;
use Illuminate\Support\Facades\Log;

class PaypalController extends Controller
{
Â  public function createTransaction(Request $request)
Â  Â  Â  Â  {
Â  Â  Â  Â  Â  Â  $amount = $request->query('amount') ?? 10.00;

Â  Â  Â  Â  Â  Â  $provider = new PayPalClient;
Â  Â  Â  Â  Â  Â  $provider->setApiCredentials(config('paypal'));

Â  Â  Â  Â  Â  Â  $token = $provider->getAccessToken();

Â  Â  Â  Â  Â  Â  if (!is_array($token)) {
Â  Â  Â  Â  Â  Â  Â  Â  Log::error('PayPal token response was not an array', ['token' => $token]);
Â  Â  Â  Â  Â  Â  Â  Â  abort(500, 'PayPal authentication failed.');
Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  $provider->setAccessToken($token);

Â  Â  Â  Â  Â  Â  // Pull items from session
Â  Â  Â  Â  Â  Â  $cartItems = session('paypal_cart', []);
Â  Â  Â  Â  Â  Â  $items = [];

Â  Â  Â  Â  Â  Â  foreach ($cartItems as $item) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  $course = Course::where('unique_id', $item['unique_id'])->first();

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  $payment = Payment::where('course_unique_id', $item['unique_id'])
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ->where('status', 'pending')
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ->latest()
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ->first();

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  $paymentUniqueId = $payment ? $payment->payment_unique_id : 'UNKNOWN';

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  $items[] = [
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  'name' => $item['title'], // course Title Want to show
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  'description' => 'Course ID: ' . $item['unique_id'] .
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ' | Quantity: ' . $item['quantity'], Â  Â  // In Description whatever you can show to paypal
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  'quantity' => (int) $item['quantity'],
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  'unit_amount' => [
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  'currency_code' => 'GBP',
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  'value' => number_format((float) $item['price'], 2, '.', ''),
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ],
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  'sku' => (string) $paymentUniqueId, Â  // Product Id
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ];
Â  Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  // Total amount
Â  Â  Â  Â  Â  Â  $totalAmount = array_reduce($items, function ($sum, $item) {
Â  Â  Â  Â  Â  Â  Â  Â  return $sum + ($item['unit_amount']['value'] * $item['quantity']);
Â  Â  Â  Â  Â  Â  }, 0);

Â  Â  Â  Â  Â  Â  // Create PayPal Order
Â  Â  Â  Â  Â  Â  $response = $provider->createOrder([
Â  Â  Â  Â  Â  Â  Â  Â  "intent" => "CAPTURE",
Â  Â  Â  Â  Â  Â  Â  Â  "application_context" => [
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "return_url" => route('paypal.success'),
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "cancel_url" => route('paypal.cancel'),
Â  Â  Â  Â  Â  Â  Â  Â  ],
Â  Â  Â  Â  Â  Â  Â  Â  "purchase_units" => [
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  [
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "description" => "Course Purchase from Seru Training",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "amount" => [
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "currency_code" => "GBP",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "value" => number_format($totalAmount, 2, '.', ''),
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "breakdown" => [
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "item_total" => [
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "currency_code" => "GBP",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "value" => number_format($totalAmount, 2, '.', '')
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ]
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ]
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ],
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "items" => $items
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ]
Â  Â  Â  Â  Â  Â  Â  Â  ]
Â  Â  Â  Â  Â  Â  ]);

Â  Â  Â  Â  Â  Â  // Redirect to approval URL
Â  Â  Â  Â  Â  Â  if (isset($response['id']) && $response['status'] == 'CREATED') {
Â  Â  Â  Â  Â  Â  Â  Â  foreach ($response['links'] as $link) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if ($link['rel'] === 'approve') {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  return redirect()->away($link['href']);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  return redirect()->route('paypal.error')->with('error', 'Something went wrong with PayPal.');
Â  Â  Â  Â  }

public function successTransaction(Request $request)
{
Â  Â  $provider = new PayPalClient;
Â  Â  $provider->setApiCredentials(config('paypal'));

Â  Â  $token = $provider->getAccessToken();
Â  Â  $provider->setAccessToken($token); 

Â  Â  $response = $provider->capturePaymentOrder($request->query('token'));

Â  Â  if (isset($response['status']) && $response['status'] === 'COMPLETED') {
Â  Â  Â  Â  $capture = $response['purchase_units'][0]['payments']['captures'][0];
Â  Â  Â  
Â  Â  Â  Â  $transactionId = $response['purchase_units'][0]['payments']['captures'][0]['id'];
Â  Â  Â  Â  $payerId = $response['payer']['payer_id'] ?? null;
Â  Â  Â  Â  $payerEmail = $response['payer']['email_address'] ?? null;
Â  Â  Â  Â  $amount = $capture['amount']['value'] ?? 0;

Â  Â  Â  Â  $cartItems = session('paypal_cart', []);
Â  Â  Â  Â  $paymentUniqueId = null;

Â  Â  Â  Â  if (!empty($cartItems)) {
Â  Â  Â  Â  Â  Â  $firstItem = $cartItems[0];
Â  Â  Â  Â  Â  Â  $payment = Payment::where('course_unique_id', $firstItem['unique_id'])
Â  Â  Â  Â  Â  Â  Â  Â  ->where('status', 'pending')
Â  Â  Â  Â  Â  Â  Â  Â  ->latest()
Â  Â  Â  Â  Â  Â  Â  Â  ->first();

Â  Â  Â  Â  Â  Â  if ($payment) {
Â  Â  Â  Â  Â  Â  Â  Â  $paymentUniqueId = $payment->payment_unique_id;
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }

Â  Â  Â  Â  if (!$paymentUniqueId) {
Â  Â  Â  Â  Â  Â  return redirect()->route('paypal.error')->with('error', 'Could not verify payment session.');
Â  Â  Â  Â  }

Â  Â  Â  Â  // ðŸŸ¢ Update all matching records with transaction & account IDs
Â  Â  Â  Â  Payment::where('payment_unique_id', $paymentUniqueId)->update([
Â  Â  Â  Â  Â  Â  'status' => 'completed',
Â  Â  Â  Â  Â  Â  'payment_type' => 'paypal',
Â  Â  Â  Â  Â  Â  'transaction_id' => $transactionId,
Â  Â  Â  Â  Â  Â  'account_id' => $payerId,
Â  Â  Â  Â  Â  Â  'paypal_email' => $payerEmail Â  Â 
Â  Â  Â  Â  ]);

Â  Â  Â  Â  // Optional course progress logic
Â  Â  Â  Â  $details = Payment::where('payment_unique_id', $paymentUniqueId)->first();
Â  Â  Â  Â  CourseProgress::updateOrCreate(
Â  Â  Â  Â  Â  Â  [
Â  Â  Â  Â  Â  Â  Â  Â  'learner_secret_id' => $details->learner_secret_id,
Â  Â  Â  Â  Â  Â  Â  Â  'course_unique_id' => $details->course_unique_id
Â  Â  Â  Â  Â  Â  ],
Â  Â  Â  Â  Â  Â  ['progress' => '0']
Â  Â  Â  Â  );

Â  Â  Â  Â  // Clear session
Â  Â  Â  Â  session()->forget(['paypal_cart', 'paypal_billing', 'paypal_total']);

Â  Â  Â  Â  return redirect()->route('learner.page')->with('success', 'Payment successful!');
Â  Â  }

Â  Â  return redirect()->route('paypal.error')->with('error', 'Payment failed.');
}

public function cancelTransaction()
{
Â  Â  return redirect()->route('learner.payment')->with('error', 'Payment canceled.');
}

public function errorTransaction()
{
Â  Â  return view('course.paypalError');
}

}





